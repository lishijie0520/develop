package com.develop.image;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.awt.image.MemoryImageSource;
import java.awt.image.PixelGrabber;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.math.BigInteger;
import java.net.URL;
import java.util.Arrays;

import javax.imageio.ImageIO;
import javax.imageio.stream.FileImageInputStream;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.ddf.EscherColorRef.SysIndexSource;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.converter.pack.JBigInflateConverter;

import sun.misc.BASE64Decoder;


//png 转成 bmp
public class ConverterTest3 {
	private final Logger logger = LoggerFactory.getLogger(this.getClass());
	@Test
	public void test(){
		try {
			
			//相对路径
			String  path = this.getClass().getResource("/").getFile().toString();
	        path = path.replace("test-classes", "classes");
			
			String pngImagePath = "/Users/hsm/git/develop/src/test/resources/test222-2.png";
			String jpgImagePath = "/Users/hsm/git/develop/src/test/resources/test222-2.jpg";
			String bmpImagePath = "/Users/hsm/git/develop/src/test/resources/test222-2.bmp";
			
			String jpgPath = pngToJpg(pngImagePath, jpgImagePath);//png --> jpg
			//String jpgPath ="/Users/hsm/git/develop/src/test/resources/IMG_1337.JPG";
			logger.info("图片格式转换成功[{}]", new Object[] { jpgPath });
			
			String bmpPath = jpgToBmp(ImageIO.read(new File(jpgImagePath)),bmpImagePath);
			System.out.println(bmpPath);
			//String pnmPath = converter(jpgPath, pnmImagePath, "pnm");//jpg --> pnm
			
			
			
			//logger.info("图片格式转换成功[{}]", new Object[] { pnmPath });
			
			//deleteFile(jpgPath);
			
			//deleteFile(pnmPath);
			
		} catch (Exception e) {
			logger.error("图片格式转换失败 [{}]", new Object[] { e.getMessage()});
		}
		
	}
	//十六进制 图片
	@Test
	public void testBetys(){
		try {
			
			//相对路径
			String  path = this.getClass().getResource("/").getFile().toString();
	        path = path.replace("test-classes", "classes");
			
			//String pngImageString = "89504E470D0A1A0A0000000D4948445200000100000000500806000000F68BAB25000000017352474200AECE1CE90000001C69444F5400000002000000000000002800000028000000280000002800000751680B79AA0000071D494441547801EC9B7B6C1455148729F256948725601141C3C328828204B53E208882FEA17FA026F88A1A90881642AC488896C647352A624221220912A28020A0518114816A405181880F14948288803C4A4C9587A0DFCF7493ED86D6DD9DD9D9B9B3E7245F76673B73EF3DBF997BEEBD676E1B353233054C0153C01430054C0153C01430054C0153C01430054C0153C01430054C0153C01430054C0153C01430054C0153C01430054C0153C01430054C0153C01430051C53A023ED2D83C5B0B09677F89C0BCFC08330047A413E9C0166A68029E0B802EAC8F7C11EF81A4AA104A6D47EBEC4A70241257C0F3BE027580F45703E989902A680830A68245F0435500CADA0216BC91F0BA01F4C84CDB01714208643733033054C01071428A48D3FC3B7A00E9D8E35E52295331B1408B6C004E80466A680291042051AD3A6F1700CE6405BF0C3944318070A02FBE00DE80D66A640C614E849C993615A2D9AC6F68576D004CCEA2A702E870B4053FED175FFE4DB919601C360055483960703210FCC32AC80A6641742F77A50C2A6354421837B017EEC868D30135E874F60176C872FE103288749F0441C63F97E270C8501A0CC767D9AF9F17B7BCACF76075027FC11BE83FE906993BFAA5301E0082C831E6096010534AD5312461D40D95C7500656A13A9E2373D041B6039CC82893002D41114205C1939959D3E0C0A783153DB3BC2957007A8D3CF807761691C157C97069AAE6E85FAF44AD42F9D63ADB3C53A28879B20C800AC8EF808FC05F340B3A3A0ED722A5C050A047A73D00CCC7C52A01FE5AC0175063D60978032B5EACC8968342B04758E09A0F3354A6E023DDC55F015BC0C43412357184D3E1C05F990AEA963B400F9589F5E89FAA573DC85F207C028580C2760240461CADACF02ADF735EBC9E62C44C1790CE8395D0B1781994705B48EAB018D705E04D588A48E70293C048B40A396A6D3F3416B3A3D4C61318DE65BE0ACB03428C97674E6BCDF41B3AE4C9BD6FB1FC201189CE9CA52285FCFE967F00B5C91C275766A9C021AB9B4E63D0EE3411DD86F53AEE0469803BB4153E5E74041424B8E6C99927C1AFDC766AB011EEA8D0580620F65247369374ED24C6E1BF449E68280CF69437DCA091C844101D7ED7C751AF51682A652EAA041583E953C00AB613F5482D6955D21685310D2285A1074C53ED417440050FE43017B3DA8BEB09A66941AC43483BD2BAC8D0C5BBB14393F82BD7075161A97479DCA319482F2066A875EF7283804D121F5D068BBEA0270D1321D008623CA21D01249CF4AD8AD310D7C1E4E4151D81B9BEDF6694DB70A7682B2AAD9B6A63440A34D197C030A06F32093EBBA81947F1246808B96C900703B82FC09D3A18563E26836790232BD34724C96BACD7D93C33DD0B3EECFA1386A4E2B6E80F7A01A96402666287753AE1EF23EE0A2C502805E4FFA69D751D811780D344B73D19EA2D1CAED28C89B2528A0C49BDEE33E9EF07BD80EF5F06993C97C50205809D7835F160B0097F95560C0E5F4A03E05B0513ED6DB9BB27E0505DD663E961B74519AB5286FB10E94E7328B53602ADF957C3B2FEEB7B07F55D09A0B0A5CE5A0258C57733D00DC8200FFC0355E85A8BDBE3B9FDB610DB405D7ED2A1CA881C9AE3BE267FB2FA6B03F608A9F850658D660EADA0A3BE1368FF5BA1E0026E1BFDE6074F6A8832EEF02CABD7C0E1D202AF6348E68D018101587BCFAF1020568F4EFE4B5A02C5E7F3675BF084AF43CE9A11DAE0780A5F8BE01BCEEDB6849194A082BB0FA114C282634D68A967C0115E055A7D038956E4324C026D04EBF28D8689C380E1A09D33197038082E036D072C8AB2917A45152C9BF289A96BC55704E149D4BC5A79E9CACE9FF63A95C14F2731FA67DC7A0388D76BA1C003AE2EF5E50B6DB8B0DE1E2A3F0AC9742427EEDABB46F07E47C001889087AEFDD17A264E370467EDD9AA253AE0780DFF0576BDC74AD900BAB41C955EDC388AA5900A8BDB36FF1A9448FD67C51B22638B31C3683A6C6C95A2E0780D8DA783562354F563047CFB300C08D6B03DAD33DCDD19BF87FCD569637D5BD0DB91C00EE412F2551072508ABC141338333137E77F9D0020077AF03EC831288AA2921A620979FA483B91C00DE472365C7357B8AB79B39504E4501352A6601803BA900A0A4913A4954ED511CD316D66E493A98AB01A01DFA681FC52BA7D149AF55A5A1928C51310B00DCC9D6F0319C82A80681227C3B0C5D2119CBD50050803807A0F83422BDCD6F1BC1E56DC0896E4DE5879C7C0BA0CC6EFCE687161CDF0FCA0344E906E3CE7F660120A644C39FEDF9B3F6105440E296EA15FCA64D4151B2D938F303442DF9DDE03D529677099C2ECA3778A1C37FB40090FCCDEBCFA97A23A440501877D94CBEEF82C4C010778A735FD7D2E295CEB5DA6383EFE5FABF6198C7725CBA5C39806AB01C4072774D338139A0CD61CBE05AD03F5D1D82528882E9B5B082DCF42838938A0F959CAC357F2E5909CEEE07AD7193B15CCD01C46B93C7816603DA0C7410B42FE053380965A099A4CBD68BC6EBADC6986C3AF12F000000FFFFC61BFD76000005B349444154ED9B798855551CC79DD46C93721DCB72616C3333350B2C30DA402D212C48238B484A2B24DA6CD19A080213FB43298ACA044B45C97088B2A0CCB23F4A33CDB15D99B48DC416B1C5C2EAF38584417CCF77EF7BF7DE7366BE3FF850EFBD7BCEEF773FEFDD73CF3977ECD021DFE844BAF5B02CDFB48566EB48F6F76055822AAEE5D8DF61688236A11CDA8742BE87876A5850037DCD816DB00FFE85B7613C9C0C47426C3183827F8541B1155E4DBD1A00D6C1F26A3A89ACED10EAFD0B6E4A5077CC03403DE7F91D342638DF4A0FEDC181A3E136D0EF4803C12FF0327485584203D626782996826B55677B9C01E8CEB50BFA279018F300A0F3D49DEDCE04E79BE6D0DE345A0B723B364D0705B6B98CDCFFC0F8026B282CF51A32BF5958F67C130F27DD1E9899306DCC03C0159CABA6E9E7253CE734879F48A38FA0192E803A88215EA5C88D10E3D2A56ABF77D0832E8A53AAEE29EC0E0EA3BC26D802DD12963A99E363DD03B897DA77C24909CF39EDE17D69B80076837C8F8490E32E8AD3007975C8456659DB403AD797352BCB2401F43D951AF4454F4851CB35B4F90386A5685B74930728E047D0859967C895D6D4FA6DBD08674068318D82FE86DB432B2CEF7A1E27A1D68923F24E9C53BE89E4D105DC98329FA6B35A235E92B27D91CD5E21F93AE8525011E793F775F819F4B449AF351B2B32B434D145AF8BFFFE220B0925F73114F20E6C80A4D3E350CEA1541DBAE36BFA3EA7D40115BCAF59D29FA059444CA15DFA1D30BBE0A275C18F82A5F013AC017D2F45ACB9F5FB5E04BA21DC028EFF0D0CE6BFDAC17DA68D18D1F37EAD7FF78266387AE291368EA3610BCC4DDB4141ED7A92378401A0F5E99FC68B79A047939FC193300EBA4396A1C14683CEE7B00D3420390E30A08D90A4CFC80FE8228897BDA962FFFAF3FA1A54A41FCF66D0E6564C712CC53683EE76D3032BBC9E7A26C112D80A2DB0023435BF18FA4167A8268EA6B136B7EF864F41838E6E06CAED28614053E53D706189CF437FFB520A6C01FDF087422DE2283A517FCFD5A2B39CFB68209F7EF4AFC11139E7AE349D062AEDAFE8B7F716E82EFD356C040DE48FC03D30A302B4A6D72C7635A89FEDB001A6432F701CC28046CD45A0757323E8750CA1B5DD7CD80B4F80A6EDB58A98070039E808A15EFC07FB8EBAF2E6E970153C0A1A049A6065853CC571FAEB44DDC4064017702430A04D9B89A029D326D02E78C8A1BBFE97A0A9E4980C0A8D7D00C84089BB6C0F06FA70925AF76A49B018064328A14D3D8DF0CBE137D06652561B491E0090EB68BF06CEE5D4DF80DDA00BED54282A7A92782A7C083B417F64320AB20C0F0059DA75DF5118A8A3CAB1A0BF17D8055A8F69BA7D38641D5AC38D8667E11BD0E6CE2CE80F798406802DB0308F64CE6103211BD0FE806604BA187F808F41BBB4E340FF18441B4EB5085DF4FAA7BB334139944BD3FDCB4117649EA1739E0B53F24C5A452E2D8FE46F3F1ABC1D3650730327D0A31EAF34819EB36E870F408F61EE839B413BB95AAB9F0DC3CB308CCF46C28DF00234C3B7B016B4A3DB17DA42E8A2D45FE80D84B3A09413F9380734E0C9E3C3F018CC2E83BCAF027D07DABCD54C495C090E1BC8D4801E179E093780F60956809EE9AE070D0E5F548076F175BC1EE7E947AB297EAD661474953ABAD17200A89E83D18FF787C004781096C2BBA0C1AB35EFF3FA13D0790A3DB928E7459F6F86D5B00416C0F32558C8FBF3E056D020B10F9E0679AC07870D1462A08EAC9AB2F7805E87401B7C9D20B4984F413BE0AB32B4F099EEBA2B4177EA293019AE6BC524FE5F8F2C47C020D05396724EBAF37967481A6A7711A4699B34978FB781366F4083972ED88612E8B3E3C1171C121C3660033660033660033660033660033660033660033660033660033660033660033660033660033660033660033660033660033660033660033660033660033660033660033660033660033660033660033660033660033660033660033660033660033660033660033660033660033610A981FF00F0C281B82ED8D3460000000049454E44AE426082";
			String pngImageString
			String jpgImagePath = "/Users/hsm/git/develop/src/test/resources/test13110.jpg";
			String pnmImagePath = "/Users/hsm/git/develop/src/test/resources/82511_20160616092323921.pnm";
			String bmpImagePath = "/Users/hsm/git/develop/src/test/resources/test13110.bmp";
			String data = "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";
			byte[] textBytes = Base64.decodeBase64(data);
			 byte[] picByte = new BASE64Decoder().decodeBuffer(data);
			
			String string = new String(textBytes);
			
			//String jpgPath = pngToJpg(HexString2Bytes(pngImageString),jpgImagePath);//png --> jpg
			String jpgPath = pngToJpg(picByte,jpgImagePath);//png --> jpg
			//String jpgPath ="/Users/hsm/git/develop/src/test/resources/IMG_1337.JPG";
			
			String bmpPath = jpgToBmp(ImageIO.read(new File(jpgPath)),bmpImagePath);
			
			byte[] image2byte = image2byte(bmpPath);
			String byte2string = byte2hex(image2byte);
			System.out.println(byte2string);
			//deleteFile(jpgPath);
			
			//deleteFile(pnmPath);
			
			
			
			
//			byte[] hexString2Bytes = HexString2Bytes(byte2string);
//			ImageIO.write(im, "bmp", new  File("/Users/hsm/Desktop/images/aa.bmp"));
			
		} catch (Exception e) {
			logger.error("图片格式转换失败 [{}]", new Object[] { e.getMessage()});
		}
		
	}
	 /**
     * 测试返回的 签名图片
     *
     * @param fileRelPath
     * @param picBuffer
     */
    public static File getPicByBase64Str(String fileRelPath, String picBuffer) {
        File file = null;
        File fileTemp = null;
        if (StringUtils.isBlank(picBuffer)) {
            return file;
        }
        try {
            byte[] picByte = new BASE64Decoder().decodeBuffer(picBuffer);
            String tempPath = fileRelPath.substring(0, fileRelPath.lastIndexOf(File.separator))+File.separator;
            String filename = fileRelPath.substring(fileRelPath.lastIndexOf(File.separator));
            file = new File(tempPath);
            if (!file.exists()) {
                file.mkdirs();
            }
            fileTemp = new File(file,filename);
            if(!fileTemp.exists()){
                fileTemp.createNewFile();
            }
            FileOutputStream out = new FileOutputStream(fileTemp);
            out.write(picByte);
            out.flush();
            out.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
        return fileTemp;
    }
	
	@Test
	public void testbase64(){
		String data = "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";
		byte[] textBytes = Base64.decodeBase64(data);
		File picByBase64Str = getPicByBase64Str("/Users/hsm/Desktop/images/ccc.jpg", data);
		
		
	
		System.out.println(textBytes);
		
	}
	
	/**
	 *  图片格式转换
	 * @param sourceImagePath 源图片路径
	 * @param targetImagePath 转化图片路径
	 * @param type 转成图片的类型
	 * @return 新格式图片路径
	 * @throws Exception
	 */
	public String  converter(String sourceImagePath,String targetImagePath,String type) throws Exception {
		
		//URL resource = getClass().getResource("/test.jpg");
		File file = new File(sourceImagePath);
		
		URL resource = file.toURI().toURL();
		
 		BufferedImage img = ImageIO.read(resource);
		File f =  new  File(targetImagePath);
		
		ImageIO.write(img, type, f);
		
		
		//toBmp(ImageIO.read(f));
		return targetImagePath;
		
	}
	
	

	/**
	 * 透明的png转换成背景为白色的jpg图片 
	 * @param pngImagePath
	 * @param jpgImagePath
	 * @return 新格式图片路径
	 */
	public String  pngToJpg(String pngImagePath,String jpgImagePath) {
		BufferedImage bufferedImage;

		try {

			// read image file
			bufferedImage = ImageIO.read(new File(pngImagePath));

			// create a blank, RGB, same width and height, and a white
			// background
			BufferedImage newBufferedImage = new BufferedImage(bufferedImage.getWidth(), bufferedImage.getHeight(),
					BufferedImage.TYPE_INT_RGB);
			newBufferedImage.createGraphics().drawImage(bufferedImage, 0, 0, Color.WHITE, null);

			// write to jpeg file
			ImageIO.write(newBufferedImage, "jpg",new File(jpgImagePath));

			
		} catch (IOException e) {

			e.printStackTrace();

		}
		return jpgImagePath;
	}
	
	
	
	/**
	 * 透明的png转换成背景为白色的jpg图片 
	 * @param pngImagePath
	 * @param jpgImagePath
	 * @return 新格式图片路径
	 */
	public String  pngToJpg(byte[] b ,String jpgImagePath) {
		BufferedImage bufferedImage;
		BufferedImage newBufferedImage = null;

		try {
			InputStream in = new ByteArrayInputStream(b);
			// read image file
			bufferedImage = ImageIO.read(in);

			// create a blank, RGB, same width and height, and a white
			// background
			 newBufferedImage = new BufferedImage(bufferedImage.getWidth(), bufferedImage.getHeight(),
					BufferedImage.TYPE_INT_RGB);
			newBufferedImage.createGraphics().drawImage(bufferedImage, 0, 0, Color.WHITE, null);

			// write to jpeg file
			ImageIO.write(newBufferedImage, "jpg",new File(jpgImagePath));
			
			
		} catch (IOException e) {

			e.printStackTrace();

		}
		return jpgImagePath;
	}
	
    /**
     * 删除单个文件
     * @param   sPath    被删除文件的文件名
     * @return 单个文件删除成功返回true，否则返回false
     */
    public boolean deleteFile(String sPath) {
       boolean flag = false;
       File file = new File(sPath);
        // 路径为文件且不为空则进行删除
        if (file.isFile() && file.exists()) {
            file.delete();
            flag = true;
        }
        return flag;
    }
    
    
    //转成单色位图
    public String jpgToBmp(BufferedImage bufferedImage,String bmpPath) throws IOException{
    	//BufferedImage sourceImg = ImageIO.read(new File(bufferedImage));  
    	BufferedImage sourceImg = bufferedImage;  
    	  int h = sourceImg.getHeight();
    	  int w = sourceImg.getWidth();
    	  int[] pixels = new int[w * h]; // 定义一数组，用来存储图片的象素
    	  int gray;
    	 
    	  PixelGrabber pg = new PixelGrabber(sourceImg, 0, 0, w, h, pixels,    0, w);
    	  try {
    	   pg.grabPixels(); // 读取像素值
    	  } catch (InterruptedException e) {
    	   System.err.println("处理被异常中断！请重试！");
    	  }
    	 
    	  for (int j = 0; j < h; j++) // 扫描列 
    	  {
    	   for (int i = 0; i < w; i++) // 扫描行
    	   { // 由红，绿，蓝值得到灰度值
    	    gray = (int) (((pixels[w * j + i] >> 16) & 0xff) * 0.8);
    	    gray += (int) (((pixels[w * j + i] >> 8) & 0xff) * 0.1);
    	    gray += (int) (((pixels[w * j + i]) & 0xff) * 0.1);
    	    pixels[w * j + i] = (255 << 24) | (gray << 16) | (gray << 8)
    	      | gray;
    	   }
    	  }
    	  MemoryImageSource s = new   MemoryImageSource(w,h,pixels,0,w);
    	  Image img =Toolkit.getDefaultToolkit().createImage(s);
    	  BufferedImage buf = new BufferedImage(w, h, BufferedImage.TYPE_BYTE_BINARY);
    	  buf.createGraphics().drawImage(img, 0, 0, null);
    	  
    	  ImageIO.write(buf, "BMP", new File(bmpPath));
    	  return bmpPath;
    }
    @Test
    public void bmp(){
    	try {
			BufferedImage src = ImageIO.read(new File("/Users/hsm/git/develop/src/test/resources/test222-2.jpg")); // 读入源图像
			int width = src.getWidth(); // 源图宽
			int height = src.getHeight(); // 源图高

			Image image = src.getScaledInstance((int) (width), (int) (height),
					Image.SCALE_DEFAULT);

			BufferedImage tag = new BufferedImage((int) (width),
					(int) (height), BufferedImage.TYPE_INT_RGB);
			Graphics2D g = tag.createGraphics();

			g.drawImage(image, 0, 0, null);

			g.dispose();

			OutputStream out = new FileOutputStream("/Users/hsm/git/develop/src/test/resources/test222-2.bmp");
			//tag.setRGB(5, 5, 123);
			ImageIO.write(tag, "BMP", out);
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
    }
    
  
    
    @Test
    public  void jbig() {
		//String data
		//String data="0000010000000140000000AA000000070800031CFF02FF02C2347F2D42C9D48BEBB224FF02045BB52AB96167389D1409B0FF0251E74C68F12FFF0287ABD82E4A17BF13EDCA5A2AFF027E23FDF3C8C5C78977E7B4F14ACB10C26FA0FF025E7C8C39C6D7B15AB0B880FF022A728537E57493F8E0FF0224F3A175B4CE593DE980662682273A7DF8A0FF0253023A58716E4DA80527D5CBD0505562F8C2EA42D0FF029473BC2009ECFED56FD14937859FDFFF024186841113B48C20CD6F76EE6DE780FF02ABC97AEA8FCCFF02D02150FF02FF02FF02FF02FF02FF02FF02FF02FF02FF02FF02";//签名域
		//String data
		//String data="000001000000010000000050000000070800031CFF02D3CF5A652311B273FA5A0751FB9B7D37D3014753E0FF021DD4C08F2B9EF914CBF252904264FAE52C497BAF84C85248FF02B8E137092AE246B7C9A4059371F6C03833F1D1CB386797A97BBC2F66C87FCD88E9780AC84E2DA5B720FF028A296061C7002F23AEF965E9743FA87E0165237EBD5109265044A4869042E9446CF81A84586AB258D597776648EB2FFF027B3AEFBB166AD20FFB235AD4BA3800F26E271CB0EDFA1C459AAEB8FF0086DDEC4C108641827BAD067F5D3D3A867DA0FF020E86A846D2F236534FBC0BCD74557147C317496B6B36E46BF480FF026C1136D594B1905982D1FF003F2128845BF5B5F618EAAF25874D505152380AD44690FF0200631FA34299356198FF02FF02FF02FF02";
		//String data="000001000000010000000050000000070800031CFF02FF02D2F6BED8956195F07D660F82BB45A90AE0FF02B59CEE538D0B0D624A217EBD29318030DF6F14FF02419DBDB31B10A9DCF49077322C32F86EC3087DC905A385CA8E47B9E433BB63C140FF028B44D41F9110B20A25A796D6A6189348DD75BDFDF4456710D5CD2E944893F3E58766B75A5BFDA5B0FF02B6225D3156DF3AD645A6EFE0F16192F2CA9C690301D44ECE14F9B47B88A22243B0FF02A8AA33F21AD1C5BECA3105A820E4714C694F627A15D48E16B5E10734B4BAEA2DF58F7B86B8FF0281D6F863E00E7BBF1EDE248100BC3A44FF02CC83356DA746FF02FF02FF02";
    	//String data="00000100000001400000007c000000070800031cf4f1ff02ff02ff02e204c3223c8bea88f8c4ff020a715ca532c21110ff0200bd3c2a7ab410f52c8dfb60ff028d5b73fc069888a9e3281c39615df8ff026f295d8d5d35fb48cbf3a8e37f80ff020f23f04921d674d726b4f6980a93ff02e9efbf574ecf67c17e15f5640d5973c510ff02e8094ddebed018c9ad3c918eff027c895f9e7eca9b91c0ff0271718ea7b0ff020aa3948d40ff02c396902d93e0ff0204b87b84ff02fbd580ff02ff02";
    	//String data
    	//String data="000001000000010000000050000000070800031cf4f8ff029e9834c8ed55e3623064d7618878ff0293c91e745d540458e7a6b85f4bf972c400fa163ab17bc640416bf75b20ff022cb73c49ae94bce3aa4d1fe12345a79d80ff02d2f1b6ce5c2f224e26022f447556c184ff02a11f1bbfac0f8b73bfc074b0d69756f0ff02771c28eac7438b28c487f0e3e6dcbf20ff0289a87010d409c53d6b41a30066971b668fef0cff0267e601dbe902e24e1cad5ba176a17e0431b8ff02ff02ff02ff02";
    	//String data="000001000000010000000050000000070800031CF4F8FF027CB97D933EC624FDEB44C0FF0255C56817AF6548017C018FE9F0D8BF23FF02B38B4AA99A71DD3526F48D163328BAFB00F41D39BD16D4FD28836FDCECC630FF0266F08C40D1F9A123FBE5D61725F784A8A180FF02845DA29C01F579E4E659A5D350D7C621C0FF027CD7CEC7CCB0082A46564CB7B41314670C9563F4F9EF1B342ED8B5C815AE97A27E60FF026C9DD5029863A37501C0300C0E9F504037A8FF0260391B6EF5CE6E6D40FF02B401CA2755EA24FBC9DED3A8FF029CF46F2480FF02FF02";
    	String data="00000100000001000000009A000000070800031CF4F9BCB4F7EBFF02D4FF02FF02FF02FF02FF02FF02FF02F3DA5F12BA29FF02FF02D6EB59F8FF02FA6C78A657E894C7B31CBB4A0480FF029406B0FF02FF02FF02B9BEDAFF02FF02FF02FF02FF02FF02FF02";
		createImg(data,"/Users/hsm/Desktop/images/44444");
	}
	
	public void createImg(String data, String fileName) {
		
		try {
		File file = new File(fileName + ".jbig");
		FileOutputStream fis = new FileOutputStream(file);
		fis.write(HexString2Bytes(data));//16进制转为byte数组,网上方法很多
		fis.flush();
		fis.close();

		JBigInflateConverter jic = new JBigInflateConverter();//调用jar包里面的方法
		 jic.DoConvert(fileName+".jbig", fileName+".bmp");
		} catch (Exception e) {
		e.printStackTrace();
		
		}
	}
	private static int parse(char c) {  
	    if (c >= 'a')  
	        return (c - 'a' + 10) & 0x0f;  
	    if (c >= 'A')  
	        return (c - 'A' + 10) & 0x0f;  
	    return (c - '0') & 0x0f;  
	}  
	
	//16进制转为byte数组
	public static byte[] HexString2Bytes(String hexstr) {  
	    byte[] b = new byte[hexstr.length() / 2];  
	    int j = 0;  
	    for (int i = 0; i < b.length; i++) {  
	        char c0 = hexstr.charAt(j++);  
	        char c1 = hexstr.charAt(j++);  
	        b[i] = (byte) ((parse(c0) << 4) | parse(c1));  
	    }  
	    return b;  
	}  
	
	public static String byte2hex(byte[] b) {
		String hs = "";
		String stmp = "";
		for (int n = 0; n < b.length; n++) {
			stmp = (java.lang.Integer.toHexString(b[n] & 0XFF));
			if (stmp.length() == 1)
				hs = hs + "0" + stmp;
			else
				hs = hs + stmp;
		}
		return hs.toUpperCase();
	}
	
	
	public byte[] image2byte(String path){
	    byte[] data = null;
	    FileImageInputStream input = null;
	    try {
	      input = new FileImageInputStream(new File(path));
	      ByteArrayOutputStream output = new ByteArrayOutputStream();
	      byte[] buf = new byte[1024];
	      int numBytesRead = 0;
	      while ((numBytesRead = input.read(buf)) != -1) {
	      output.write(buf, 0, numBytesRead);
	      }
	      data = output.toByteArray();
	      output.close();
	      input.close();
	    }
	    catch (FileNotFoundException ex1) {
	      ex1.printStackTrace();
	    }
	    catch (IOException ex1) {
	      ex1.printStackTrace();
	    }
	    return data;
	  }
	
	  //byte数组到16进制字符串
	  public String byte2string(byte[] data){
	    if(data==null||data.length<=1) return "0x";
	    if(data.length>200000) return "0x";
	    StringBuffer sb = new StringBuffer();
	    int buf[] = new int[data.length];
	    //byte数组转化成十进制
	    for(int k=0;k<data.length;k++){
	      buf[k] = data[k]<0?(data[k]+256):(data[k]);
	    }
	    //十进制转化成十六进制
	    for(int k=0;k<buf.length;k++){
	      if(buf[k]<16) sb.append("0"+Integer.toHexString(buf[k]));
	      else sb.append(Integer.toHexString(buf[k]));
	    }
	    return "0x"+sb.toString().toUpperCase();
	  } 
	  
	  @Test
	  public  void test2(){
		  long userId = 90573;
			String userIds = null;
	        if(StringUtils.isNotBlank(userIds) && useList(userIds.split(","), userId)){
	            String[] userIdArr = userIds.split(",");
	            if(StringUtils.isNotBlank(userIdArr[0]) && Long.valueOf(userIdArr[0]) == userId){
	            	System.out.println("11111111111111");
	            }else if(userIdArr.length > 1 && StringUtils.isNotBlank(userIdArr[1]) && Long.valueOf(userIdArr[1]) == userId){
	            	System.out.println("55555");
	            }
	        }else{
	        	System.out.println("6666");
	        }
		}
	  public static boolean useList(String[] arr, long targetValue) {
	    	
	        return Arrays.asList(arr).contains(String.valueOf(targetValue));
	    }
	  
	@Test
	//07081607 08499510
	public void main() {
		//0708160708499510  0708 160708499510
//		String str1 = byte2hex("07081607".getBytes());
//		String str2 = byte2hex("08499510".getBytes());
//		System.out.println(StringXor(str1, str2));
		String featureCode = getFeatureCode("0708","160708499510");
		System.out.println(featureCode);//0F418317
	}

	
	/** 获取交易特征码 传入4位交易日期date和12为交易凭证号ref **/
	private String getFeatureCode(String date, String ref) {
		if (date.length() == 4 && ref.length() == 12) {
			date = date + ref.substring(0, 4);
			ref = ref.substring(4);
			byte[] dateb = date.getBytes();
			byte[] refb = ref.getBytes();
			StringBuffer sb = new StringBuffer();
			for (int i = 0; i < dateb.length; i++) {
				sb.append(Integer.toHexString(dateb[i] ^ refb[i]));
			}
			return sb.toString().toUpperCase();
		}
		return null;
	}
	
	public static String StringXor(String str1, String str2) {
		BigInteger big1 = new BigInteger(str1, 16);
		BigInteger big2 = new BigInteger(str2, 16);
		return big1.xor(big2).toString(16);

	}
	  
}
